// Copyright 2014 Ben Smith. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var child_process = require('child_process');
var mkdirp = require('mkdirp');
var path = require('path');
var execFile = child_process.execFile;

var naclbindDir = path.resolve(__dirname, '../..');
var templateDir = path.join(naclbindDir, 'templates');
var genPyPath = path.join(naclbindDir, 'bin/gen.py');

var NACL_SDK_ROOT = process.env.NACL_SDK_ROOT;
var sdkIncludeDir;

if (!NACL_SDK_ROOT) {
  throw new Error('NACL_SDK_ROOT environment variable not set.');
}

sdkIncludeDir = path.join(NACL_SDK_ROOT, 'include');


function prefixAll(prefix, a) {
  return a.map(function(el) { return prefix + el; });
}

function maybeConcatWithPrefix(args, prefix, a) {
  if (a) {
    if (!Array.isArray(a)) {
      throw new Error('Expected a to be an Array.');
    }

    return args.concat(prefixAll(prefix, a));
  }

  return args;
}

function genFile(infile, outfile, opts, callback) {
  var getDefaultIncludeDirs = function() {
        var result = [sdkIncludeDir];

        if (opts.toolchain) {
          result.push(path.join(sdkIncludeDir, opts.toolchain));
        }

        return result;
      };

  var args = [genPyPath];
  var i;

  if (Array.isArray(opts.template) != Array.isArray(outfile)) {
    throw new Error('opts.template and outfile need to be the same type.');
  }

  if (Array.isArray(opts.template)) {
    if (opts.template.length != outfile.length) {
      throw new Error('opts.template and outfile need to be same length.');
    }

    for (i = 0; i < opts.template.length; ++i) {
      args = args.concat(['-t', path.resolve(templateDir, opts.template[i])]);
      args = args.concat(['-o', outfile[i]]);
    }
  } else {
    args = args.concat(['-t', path.resolve(templateDir, opts.template)]);
    args = args.concat(['-o', outfile]);
  }

  if (opts.moduleName) {
    args.push('-m');
    args.push(opts.moduleName);
  }

  if (opts.genArgs) {
    args = args.concat(opts.genArgs);
  }

  args.push('--');
  args = maybeConcatWithPrefix(args, '-I', getDefaultIncludeDirs());

  if (opts.compileArgs) {
    args = args.concat(opts.compileArgs);
  }

  args.push(infile);

  if (Array.isArray(outfile)) {
    for (i = 0; i < outfile.length; ++i) {
      mkdirp.sync(path.dirname(outfile[i]));
    }
  } else {
    mkdirp.sync(path.dirname(outfile));
  }

  execFile('python', args, function(error, stdout, stderr) {
    if (error) {
      return callback(error);
    }

    callback(null, outfile);
  });
}

module.exports = {
file: genFile,
};
