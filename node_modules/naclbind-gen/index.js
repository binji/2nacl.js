// Copyright 2014 Ben Smith. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var child_process = require('child_process'),
    mkdirp = require('mkdirp'),
    path = require('path'),
    execFile = child_process.execFile,

    naclbindDir = path.resolve(__dirname, '../..'),
    templateDir = path.join(naclbindDir, 'templates'),
    genPyPath = path.join(naclbindDir, 'bin/gen.py'),

    NACL_SDK_ROOT = process.env.NACL_SDK_ROOT,
    sdkIncludeDir;

if (!NACL_SDK_ROOT) {
  throw new Error('NACL_SDK_ROOT environment variable not set.');
}

sdkIncludeDir = path.join(NACL_SDK_ROOT, 'include');


function prefixAll(prefix, a) {
  return a.map(function(el) { return prefix + el; });
}

function maybeConcatWithPrefix(args, prefix, a) {
  if (a) {
    if (!Array.isArray(a)) {
      throw new Error('Expected a to be an Array.');
    }

    return args.concat(prefixAll(prefix, a));
  }

  return args;
}

function genFile(infile, outfile, opts, callback) {
  var templateFile = path.resolve(templateDir, opts.template),

      getDefaultIncludeDirs = function() {
        return [sdkIncludeDir, path.join(sdkIncludeDir, opts.toolchain)];
      },

      args = [genPyPath, '-t', templateFile, '-o', outfile];

  if (opts.moduleName) {
    args.push('-m');
    args.push(opts.moduleName);
  }

  args.push('--');
  args = maybeConcatWithPrefix(args, '-I', getDefaultIncludeDirs());

  if (opts.args) {
    args = args.concat(opts.args);
  }

  args.push(infile);

  mkdirp(path.dirname(outfile), function(error) {
    if (error) {
      return callback(error);
    }

    execFile('python', args, function(error, stdout, stderr) {
      if (error) {
        return callback(error);
      }

      callback(null, outfile);
    });
});
}

module.exports = {
file: genFile,
};
