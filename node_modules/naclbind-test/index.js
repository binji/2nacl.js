// Copyright 2014 Ben Smith. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var fs = require('fs'),
    gen = require('naclbind-gen'),
    nacl = require('nacl-sdk'),
    path = require('path'),

    naclbindDir = path.resolve(__dirname, '../..');


function preprocessor(logger, fileList) {
  var log = logger.create('preprocessor.naclbind-test');

  return function(content, file, done) {
    var dirname = path.dirname(file.path),
        basename = /.*test_(.*?).js$/.exec(file.path)[1],
        header = path.join(dirname, basename + '.h'),
        source = path.join(dirname, basename + '.c'),
        outdir = path.join(naclbindDir, 'out/test/integration', basename),
        glueC = path.join(outdir, 'glue.c'),
        glueJS = path.join(outdir, 'glue.js'),
        outTestJs = path.join(outdir, 'test_' + basename + '.js'),

        mod,

        toolchain = 'newlib',
        config = 'Debug',

        extendOpts,
        doGenC,
        doGenJS,
        doBuild,
        doWatchFiles,
        doMergeJS;

    mod = require(file.path);

    doGen = function() {
      var genOpts = {
        moduleName: basename + 'Module',
        template: ['glue.c', 'glue.js'],
        toolchain: toolchain
      };

      log.debug('Generating %s and %s from %s. opts: %s',
                glueC, glueJS, header, JSON.stringify(genOpts));
      gen.file(header, [glueC, glueJS], genOpts, function(error, outfile) {
        if (error) {
          log.error('Failed to build: %s', error.toString());
          return done(error);
        }

        doBuild();
      });
    };

    doBuild = function() {
      var infiles = [
            source,
            glueC,
          ],

          opts = {
            toolchain: toolchain,
            config: config,
            outdir: outdir,
            compile: {
              args: ['-Wall', '-Werror', '-Wno-uninitialized', '-pthread'],
              defines: ['restrict='],
              includeDirs: [dirname],
              libs: ['ppapi']
            },
            createNmf: {}
          };

      if (typeof mod.buildOpts === 'function') {
        log.debug('Extending build options');
        mod.buildOpts(opts);
      }

      log.debug('Building \"%s\": files: %s, opts: %s',
                basename, infiles.join(' '), JSON.stringify(opts));
      nacl.build(infiles, basename, opts, function(error, nmf) {
        if (error) {
          log.error('Failed to build: %s', error.toString());
          return done(error);
        }

        doWatchFiles();
      });
    };

    doWatchFiles = function() {
      log.debug('Adding files in \"%s\" to watcher:', outdir);
      fs.readdir(outdir, function(error, files) {
        if (error) {
          return done(error);
        }

        files.forEach(function(file) {
          fileList.addFile(path.join(outdir, file));
        });

        doMergeJS();
      });
    };

    doMergeJS = function() {
      log.debug('Merging %s with %s.', glueJS, file.path);
      fs.readFile(glueJS, function(error, data) {
        if (error) {
          return done(error);
        }

        // Append the test JS to the naclbind generated JS.
        data += content;

        // Write the combination out for easier debugging.
        fs.writeFile(outTestJs, data, function(error) {
          if (error) {
            return done(error);
          }

          done(null, data);
        });
      });
    };

    doGen();
  }
}

preprocessor.$inject = ['logger', 'fileList'];

module.exports = {
  'preprocessor:naclbind-test': ['factory', preprocessor],
};
