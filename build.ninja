# Copyright 2014 Ben Smith. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

chrome = /opt/google/chrome-beta/google-chrome-beta
nacl_sdk_root = /home/binji/dev/chromium/src/out/pepper_36
toolchain_dir = $nacl_sdk_root/toolchain
toolchain_dir_pnacl = $toolchain_dir/linux_pnacl
pnacl-ar = $toolchain_dir_pnacl/bin/pnacl-ar
pnacl-cc = $toolchain_dir_pnacl/bin/pnacl-clang
pnacl-cxx = $toolchain_dir_pnacl/bin/pnacl-clang++
pnacl-strip = $toolchain_dir_pnacl/bin/pnacl-strip
pnacl-finalize = $toolchain_dir_pnacl/bin/pnacl-finalize
pnacl-translate = $toolchain_dir_pnacl/bin/pnacl-translate
nmf = $nacl_sdk_root/tools/create_nmf.py
run-py = $nacl_sdk_root/tools/run.py

ccflags-default = -Wall -Wno-unused-value -Wno-long-long -Werror -pthread
ccflags-debug = -g -O0
ccflags-release = -g -O2 -DNDEBUG
ccflags-zlib = -DUSE_FILE32API -DNOCRYPT -Iexamples/zlib -Iout/zlib/gen
ccflags-zip = -DUSE_FILE32API -DNOCRYPT -Iexamples/zip -Iout/zip/gen
ccflags-include = -I$nacl_sdk_root/include -I$nacl_sdk_root/include/pnacl $
                  -Isrc/c

ldflags-default = -lnacl_io -lz -lppapi_cpp -lppapi -Lout/2nacl
ldflags-debug = -L$nacl_sdk_root/lib/pnacl/Debug
ldflags-release = -L$nacl_sdk_root/lib/pnacl/Release -O2

easy-template = py/easy_template.py
helper-py = py/helper.py
commands-py = py/commands.py
glue-template-c = py/glue.template.c
glue-template-js = py/glue.template.js


rule cp
  command = cp $in $out
  description = COPY $out
rule cc
  command = $cc $ccflags -MMD -MF $out.d -c $in -o $out
  description = CC $out
  depfile = $out.d
rule ar
  command = rm -f $out && $ar rcs $out $in
  description = AR $out
rule link
  command = $cc $in $ldflags -o $out
  description = LINK $out
rule finalize
  command = $pnacl-finalize $in -o $out
  description = FINALIZE $out
rule translate
  command = $pnacl-translate $in --allow-llvm-bitcode-input -arch $arch -o $
      $out
  description = TRANSLATE $arch $out
rule nmf
  command = $nmf $in -o $out
  description = NMF $out
rule template
  command = $easy-template -j $json $in > $out
  description = TEMPLATE $out
rule run
  command = $run-py -C $dir -P $page -- $chrome --no-first-run --user-data-dir=user-data-dir
  description = RUN $page

# 2nacl
build out/2nacl/obj/commands.o: cc src/c/commands.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/2nacl/obj/handle.o: cc src/c/handle.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/2nacl/obj/interfaces.o: cc src/c/interfaces.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/2nacl/obj/message.o: cc src/c/message.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/2nacl/obj/queue.o: cc src/c/queue.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/2nacl/obj/type.o: cc src/c/type.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/2nacl/obj/var.o: cc src/c/var.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/2nacl/lib2nacl.a: ar out/2nacl/obj/commands.o $
                               out/2nacl/obj/handle.o $
                               out/2nacl/obj/interfaces.o $
                               out/2nacl/obj/message.o $
                               out/2nacl/obj/queue.o $
                               out/2nacl/obj/type.o $
                               out/2nacl/obj/var.o
  ar = $pnacl-ar

# zip
zip-json = examples/zip/zip.json

build out/zip/gen/zip_glue.c: template $glue-template-c | $easy-template $helper-py $commands-py
  json = $zip-json
build out/zip/zip_glue.js: template $glue-template-js | $easy-template $helper-py
  json = $zip-json

build out/zip/obj/ioapi.o: cc examples/zip/ioapi.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/zip/obj/zip.o: cc examples/zip/zip.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/zip/obj/zip_app.o: cc examples/zip/zip_app.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/zip/obj/zip_glue.o: cc out/zip/gen/zip_glue.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/zip/zip.bc: link out/zip/obj/ioapi.o $
                           out/zip/obj/zip_app.o $
                           out/zip/obj/zip.o $
                           out/zip/obj/zip_glue.o $
                           out/2nacl/lib2nacl.a
  cc = $pnacl-cxx
  ldflags = $ldflags-default $ldflags-release -l2nacl
build out/zip/zip.pexe: finalize out/zip/zip.bc
build out/zip/zip.nmf: nmf out/zip/zip.pexe
build out/zip/demo.jpg: cp examples/zip/demo.jpg
build out/zip/main.css: cp examples/zip/css/main.css
build out/zip/index.html: cp examples/zip/index.html
build out/zip/nacl.js: cp src/js/nacl.js
build out/zip/promise.js: cp src/js/promise.js
build out/zip/require.js: cp third_party/requirejs/require.js
build out/zip/zip_example.js: cp examples/zip/zip_example.js
build out/zip/zip.js: cp examples/zip/zip.js

build zip: phony out/zip/index.html $
                 out/zip/demo.jpg $
                 out/zip/main.css $
                 out/zip/nacl.js $
                 out/zip/promise.js $
                 out/zip/require.js $
                 out/zip/zip_example.js $
                 out/zip/zip_glue.js $
                 out/zip/zip.js $
                 out/zip/zip.nmf
default zip


# zlib
zlib-json = examples/zlib/zlib.json

build out/zlib/gen/zlib_glue.c: template $glue-template-c | $easy-template $helper-py $commands-py
  json = $zlib-json
build out/zlib/zlib_glue.js: template $glue-template-js | $easy-template $helper-py
  json = $zlib-json

build out/zlib/obj/zlib_app.o: cc examples/zlib/zlib_app.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zlib
build out/zlib/obj/zlib_glue.o: cc out/zlib/gen/zlib_glue.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zlib
build out/zlib/zlib.bc: link out/zlib/obj/zlib_app.o $
                             out/zlib/obj/zlib_glue.o $
                             out/2nacl/lib2nacl.a
  cc = $pnacl-cxx
  ldflags = $ldflags-default $ldflags-release -l2nacl
build out/zlib/zlib.pexe: finalize out/zlib/zlib.bc
build out/zlib/zlib.nmf: nmf out/zlib/zlib.pexe
build out/zlib/nacl.js: cp src/js/nacl.js
build out/zlib/promise.js: cp src/js/promise.js
build out/zlib/index.html: cp examples/zlib/index.html
build out/zlib/zlib.js: cp examples/zlib/zlib.js
build out/zlib/zlib_example.js: cp examples/zlib/zlib_example.js
build out/zlib/require.js: cp third_party/requirejs/require.js

build zlib: phony out/zlib/index.html $
                  out/zlib/nacl.js $
                  out/zlib/promise.js $
                  out/zlib/require.js $
                  out/zlib/zlib_example.js $
                  out/zlib/zlib_glue.js $
                  out/zlib/zlib.js $
                  out/zlib/zlib.nmf
default zlib

# Running
build run_zip: run || zip
  dir = out/zip
  page = index.html

build run_zlib: run || zlib
  dir = out/zlib
  page = index.html

build run: phony run_zip
