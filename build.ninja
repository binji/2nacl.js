# Copyright 2014 Ben Smith. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

chrome = /opt/google/chrome-beta/google-chrome-beta
nacl_sdk_root = /home/binji/dev/chromium/src/out/pepper_36
toolchain_dir = $nacl_sdk_root/toolchain
toolchain_dir_pnacl = $toolchain_dir/linux_pnacl
pnacl-ar = $toolchain_dir_pnacl/bin/pnacl-ar
pnacl-cc = $toolchain_dir_pnacl/bin/pnacl-clang
pnacl-cxx = $toolchain_dir_pnacl/bin/pnacl-clang++
pnacl-strip = $toolchain_dir_pnacl/bin/pnacl-strip
pnacl-finalize = $toolchain_dir_pnacl/bin/pnacl-finalize
pnacl-translate = $toolchain_dir_pnacl/bin/pnacl-translate
nmf = $nacl_sdk_root/tools/create_nmf.py
run-py = $nacl_sdk_root/tools/run.py

ccflags-default = -Wall -Wno-unused-value -Wno-long-long -Werror -pthread
ccflags-debug = -g -O0
ccflags-release = -g -O2 -DNDEBUG
ccflags-zlib = -DUSE_FILE32API -DNOCRYPT -Izlib -Iout/gen/zlib
ccflags-zip = -DUSE_FILE32API -DNOCRYPT -Izip -Iout/gen/zip
ccflags-include = -I$nacl_sdk_root/include -I$nacl_sdk_root/include/pnacl $
                  -I2nacl

ldflags-default = -lnacl_io -lz -lppapi_cpp -lppapi -Lout
ldflags-debug = -L$nacl_sdk_root/lib/pnacl/Debug
ldflags-release = -L$nacl_sdk_root/lib/pnacl/Release -O2

easy-template = py/easy_template.py
helper-py = py/helper.py
commands-py = py/commands.py
commands-h-template = py/commands.h.template
commands-c-template = py/commands.c.template
type-h-template = py/type.h.template
type-c-template = py/type.c.template
gen-js-template = py/gen.js.template
zip-json = py/zip.json
zlib-json = py/zlib.json


rule cp
  command = cp $in $out
  description = COPY $out
rule cc
  command = $cc $ccflags -MMD -MF $out.d -c $in -o $out
  description = CC $out
  depfile = $out.d
rule ar
  command = rm -f $out && $ar rcs $out $in
  description = AR $out
rule link
  command = $cc $in $ldflags -o $out
  description = LINK $out
rule finalize
  command = $pnacl-finalize $in -o $out
  description = FINALIZE $out
rule translate
  command = $pnacl-translate $in --allow-llvm-bitcode-input -arch $arch -o $
      $out
  description = TRANSLATE $arch $out
rule nmf
  command = $nmf $in -o $out
  description = NMF $out
rule template
  command = $easy-template -j $json $in > $out
  description = TEMPLATE $out
rule run
  command = $run-py -P $page -- $chrome --no-first-run --user-data-dir=user-data-dir
  description = RUN $page

# 2nacl
build out/obj/2nacl/commands.o: cc 2nacl/commands.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/obj/2nacl/handle.o: cc 2nacl/handle.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/obj/2nacl/interfaces.o: cc 2nacl/interfaces.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/obj/2nacl/message.o: cc 2nacl/message.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/obj/2nacl/queue.o: cc 2nacl/queue.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/obj/2nacl/type.o: cc 2nacl/type.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/obj/2nacl/var.o: cc 2nacl/var.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release
build out/lib2nacl.a: ar out/obj/2nacl/commands.o $
                         out/obj/2nacl/handle.o $
                         out/obj/2nacl/interfaces.o $
                         out/obj/2nacl/message.o $
                         out/obj/2nacl/queue.o $
                         out/obj/2nacl/type.o $
                         out/obj/2nacl/var.o
  ar = $pnacl-ar

# zip
build out/gen/zip/zip_commands.h: template $commands-h-template | $
    $easy-template $helper-py $commands-py
  json = $zip-json
build out/gen/zip/zip_commands.c: template $commands-c-template | $
    $easy-template $helper-py $commands-py
  json = $zip-json
build out/gen/zip/zip_type.h: template $type-h-template | $
    $easy-template $helper-py
  json = $zip-json
build out/gen/zip/zip_type.c: template $type-c-template | $
    $easy-template $helper-py
  json = $zip-json
build js/zip_gen.js: template $gen-js-template | $
    $easy-template $helper-py
  json = $zip-json

build out/obj/zip/ioapi.o: cc zip/ioapi.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/obj/zip/zip.o: cc zip/zip.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/obj/zip/zip_app.o: cc zip/zip_app.c || $
    out/gen/zip/zip_commands.h $
    out/gen/zip/zip_commands.c $
    out/gen/zip/zip_type.c $
    out/gen/zip/zip_type.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/obj/zip/zip_commands.o: cc out/gen/zip/zip_commands.c || $
    out/gen/zip/zip_commands.h $
    out/gen/zip/zip_commands.c $
    out/gen/zip/zip_type.c $
    out/gen/zip/zip_type.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/obj/zip/zip_type.o: cc out/gen/zip/zip_type.c || $
    out/gen/zip/zip_commands.h $
    out/gen/zip/zip_commands.c $
    out/gen/zip/zip_type.c $
    out/gen/zip/zip_type.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zip
build out/zip.bc: link out/obj/zip/ioapi.o $
                       out/obj/zip/zip_app.o $
                       out/obj/zip/zip.o $
                       out/obj/zip/zip_commands.o $
                       out/obj/zip/zip_type.o $
                       out/lib2nacl.a
  cc = $pnacl-cxx
  ldflags = $ldflags-default $ldflags-release -l2nacl
build out/zip.pexe: finalize out/zip.bc
build out/zip.nmf: nmf out/zip.pexe

default out/zip.nmf js/zip_gen.js


# zlib
build out/gen/zlib/zlib_commands.h: template $commands-h-template | $
    $easy-template $helper-py $commands-py
  json = $zlib-json
build out/gen/zlib/zlib_commands.c: template $commands-c-template | $
    $easy-template $helper-py $commands-py
  json = $zlib-json
build out/gen/zlib/zlib_type.h: template $type-h-template | $
    $easy-template $helper-py
  json = $zlib-json
build out/gen/zlib/zlib_type.c: template $type-c-template | $
    $easy-template $helper-py
  json = $zlib-json
build js/zlib_gen.js: template $gen-js-template | $
    $easy-template $helper-py
  json = $zlib-json

build out/obj/zlib/zlib_app.o: cc zlib/zlib_app.c || $
    out/gen/zlib/zlib_commands.h $
    out/gen/zlib/zlib_commands.c $
    out/gen/zlib/zlib_type.c $
    out/gen/zlib/zlib_type.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zlib
build out/obj/zlib/zlib_commands.o: cc out/gen/zlib/zlib_commands.c || $
    out/gen/zlib/zlib_commands.h $
    out/gen/zlib/zlib_commands.c $
    out/gen/zlib/zlib_type.c $
    out/gen/zlib/zlib_type.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zlib
build out/obj/zlib/zlib_type.o: cc out/gen/zlib/zlib_type.c || $
    out/gen/zlib/zlib_commands.h $
    out/gen/zlib/zlib_commands.c $
    out/gen/zlib/zlib_type.c $
    out/gen/zlib/zlib_type.c
  cc = $pnacl-cc
  ccflags = $ccflags-default $ccflags-include $ccflags-release $ccflags-zlib
build out/zlib.bc: link out/obj/zlib/zlib_app.o $
                       out/obj/zlib/zlib_commands.o $
                       out/obj/zlib/zlib_type.o $
                       out/lib2nacl.a
  cc = $pnacl-cxx
  ldflags = $ldflags-default $ldflags-release -l2nacl
build out/zlib.pexe: finalize out/zlib.bc
build out/zlib.nmf: nmf out/zlib.pexe

default out/zlib.nmf js/zlib_gen.js

# Running
build run_zip: run || out/zip.nmf js/zip_gen.js
  page = index.html

build run_zlib: run || out/zlib.nmf js/zlib_gen.js
  page = zlib.html

build run: phony run_zip
