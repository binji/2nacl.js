/* Copyright 2014 Ben Smith. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

[[[
from helper import *
from commands import *

types = FixTypes(types, functions)
]]]

#include "{{name}}_commands.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
[[for header in system_headers:]]
#include <{{header}}>
[[]]

[[for header in headers:]]
#include "{{header}}"
[[]]

#include "bool.h"
#include "commands.h"
#include "error.h"
#include "interfaces.h"
#include "type.h"
#include "var.h"
#include "{{name}}_type.h"

[[for fn in functions:]]
static void Handle_{{fn.name}}(Command* command);
[[]]

typedef void (*HandleFunc)(Command*);
typedef struct {
  const char* name;
  HandleFunc func;
} NameFunc;

// TODO(binji): hashmap
static NameFunc g_FuncMap[] = {
[[for function in functions:]]
  {"{{function.name}}", Handle_{{function.name}}},
[[]]
  {NULL, NULL},
};

bool Handle{{Titlecase(name)}}Command(Command* command) {
  NameFunc* name_func = &g_FuncMap[0];
  for (; name_func->name; name_func++) {
    if (strcmp(name_func->name, command->command) == 0) {
      name_func->func(command);
      return TRUE;
    }
  }
  return FALSE;
}

[[for _, function in types.function_types.iteritems():]]
void Handle_{{function.name}}(Command* command) {
  TYPE_CHECK(TYPE_FUNC_{{CamelToMacro(function.name)}});
[[  for arg_ix, arg_type in enumerate(function.arg_types):]]
  {{ArgInit(arg_ix, arg_type)}}
[[  ]]
  {{function.return_type}} result = ({{function.return_type}}){{function.name}}({{ArgsCommaSep(function.arg_types)}});
  {{RegisterHandle(function.return_type)}}
  {{PrintFunction(function)}}
}

[[]]
